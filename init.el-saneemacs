(load "~/.emacs.d/sanemacs.el" nil t)

;; Theme
(use-package ample-theme
  :init (progn (load-theme 'ample t t)
               (load-theme 'ample-flat t t)
               (load-theme 'ample-light t t)
               (enable-theme 'ample-flat))
  :defer t
  :ensure t)

(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :ensure t
  :init
  (setq exec-path-from-shell-variables
	'("PATH" "MANPATH" "FZF_DEFAULT_COMMAND" "FZF_DEFAULT_OPTS"))
  :config
  (exec-path-from-shell-initialize))

(use-package all-the-icons
  :if (display-graphic-p))

(use-package fzf
  :bind (("C-s-f e" . fzf)
	 ("C-s-f b" . fzf-switch-buffer)
	 ("C-s-f f" . fzf-find-file)
	 ("C-s-f p" . fzf-projectile)
	 ("C-s-f g" . fzf-grep)
	 ("C-s-f d" . fzf-directory)
	 ("C-s-f s" . fzf-git))
  :config
  (setq fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        fzf/grep-command "rg --no-heading -nH"
        ;; fzf/grep-command "grep -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom t
        fzf/window-height 15))

(use-package magit
    :bind (:map magit-file-section-map
           ("RET" . magit-diff-visit-file-other-window)
           :map magit-hunk-section-map
           ("RET" . magit-diff-visit-file-other-window)))

;; Lisp stuff
(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "ros -Q run"))

;; SLIME from Git
;; (use-package slime
;;   :ensure nil
;;   :load-path "~/.emacs.d/slime/")  ; Adjust path to where you cloned SLIME
;; (setq inferior-lisp-program "sbcl")  ; Set your Lisp implementation (e.g., SBCL)

(use-package paredit
  :ensure t
  :hook
  ((lisp-mode . paredit-mode)
   (emacs-lisp-mode . paredit-mode)
   (scheme-mode . paredit-mode)))

(use-package rainbow-delimiters
  :ensure t
  :hook
  ((prog-mode . rainbow-delimiters-mode)))

;; VTerm
(use-package vterm
  :ensure t
  :config
  (add-hook 'vterm-mode-hook (lambda () (display-line-numbers-mode 0))))


;; Powerline
(use-package powerline
  :ensure t
  :config
  (powerline-default-theme))

;; Buffers
(setq switch-to-buffer-obey-display-actions t)

;; Org mode
(use-package org
  :ensure nil  ; org comes built-in with Emacs
  :bind
  ("C-c a" . org-agenda))

;; which-key-mode
(use-package which-key
  :ensure nil           ; Explicitly disable package installation
  :config
  (which-key-mode 1))   ; Enable which-key

;; eshell
(use-package eshell
  :ensure nil
  :config
  (setq eshell-destroy-buffer-when-process-dies t)
  (with-eval-after-load 'em-term
    (add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode 0)))
    (add-to-list 'eshell-visual-commands "lazygit")
    (add-to-list 'eshell-visual-commands "lf")
    (add-to-list 'eshell-visual-commands "nvim")))

(use-package eshell-vterm
  :ensure t
  :after eshell
  :config
  (eshell-vterm-mode))

;; vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode))

;; corfu
(use-package corfu
  ;; Optional customizations
  ;; :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

  ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
  :ensure t
  :init
  (global-corfu-mode))

;; Other emacs configurations
(use-package emacs
  :init
 ;; Window navigation & management
  (global-set-key (kbd "M-h") 'windmove-left)
  (global-set-key (kbd "M-j") 'windmove-down)
  (global-set-key (kbd "M-k") 'windmove-up)
  (global-set-key (kbd "M-l") 'windmove-right)

  (global-set-key (kbd "M-H") (lambda () (interactive) (enlarge-window -1 t)))
  (global-set-key (kbd "M-J") (lambda () (interactive) (enlarge-window  1)))
  (global-set-key (kbd "M-K") (lambda () (interactive) (enlarge-window -1)))
  (global-set-key (kbd "M-L") (lambda () (interactive) (enlarge-window  1 t)))
  (set-frame-font "Hurmit Nerd Font Mono 16" nil t)
  (add-hook 'prog-mode-hook #'completion-preview-mode))
